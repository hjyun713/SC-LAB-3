# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'prediction.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5.QtCore import *
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *

# 모듈화
from main_func import *
from Convert_mss_func import CONVERT_MSS
from predict import prediction  # 추론 함수
import traceback

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(990, 968)
        MainWindow.setStyleSheet("")
        self.centralwidget = QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout_3 = QGridLayout(self.centralwidget)
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.splitter_14 = QSplitter(self.centralwidget)
        self.splitter_14.setOrientation(Qt.Orientation.Horizontal)
        self.splitter_14.setObjectName("splitter_14")
        self.splitter_6 = QSplitter(self.splitter_14)
        self.splitter_6.setOrientation(Qt.Orientation.Vertical)
        self.splitter_6.setObjectName("splitter_6")
        self.vd_print = QLabel(self.splitter_6)
        self.vd_print.setMinimumSize(QSize(640, 400))
        self.vd_print.setMaximumSize(QSize(16777215, 16777215))
        font = QFont()
        font.setFamily("Consolas")
        font.setPointSize(20)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(9)
        self.vd_print.setFont(font)
        self.vd_print.setStyleSheet("background-color: rgb(0, 0, 0);color: rgb(255, 255, 255);\n"
                                    "font: 75 20pt \"Consolas\";")
        self.vd_print.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.vd_print.setObjectName("vd_print")
        self.fname_label = QLabel(self.splitter_6)
        self.fname_label.setMaximumSize(QSize(16777215, 50))
        font = QFont()
        font.setFamily("Consolas")
        font.setPointSize(9)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(9)
        self.fname_label.setFont(font)
        self.fname_label.setStyleSheet("font: 75 9pt \"Consolas\";")
        self.fname_label.setObjectName("fname_label")
        self.splitter_2 = QSplitter(self.splitter_6)
        self.splitter_2.setMaximumSize(QSize(16777215, 50))
        self.splitter_2.setOrientation(Qt.Orientation.Horizontal)
        self.splitter_2.setObjectName("splitter_2")
        self.splitter = QSplitter(self.splitter_2)
        self.splitter.setOrientation(Qt.Orientation.Horizontal)
        self.splitter.setObjectName("splitter")
        self.play_btn = QPushButton(self.splitter)
        self.play_btn.setMaximumSize(QSize(100, 50))
        font = QFont()
        font.setFamily("Arial")
        font.setPointSize(14)
        font.setBold(False)
        font.setWeight(50)
        self.play_btn.setFont(font)
        self.play_btn.setStyleSheet("")
        self.play_btn.setObjectName("play_btn")
        self.stop_btn = QPushButton(self.splitter)
        self.stop_btn.setMaximumSize(QSize(100, 50))
        font = QFont()
        font.setFamily("Arial")
        font.setPointSize(20)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        font.setKerning(False)
        font.setStyleStrategy(QFont.PreferDefault)
        self.stop_btn.setFont(font)
        self.stop_btn.setStyleSheet("text-align: top;")
        self.stop_btn.setObjectName("stop_btn")
        self.vd_slider = QSlider(self.splitter_2)
        self.vd_slider.setMaximumSize(QSize(16777215, 50))
        self.vd_slider.setStyleSheet("")
        self.vd_slider.setMaximum(99)
        self.vd_slider.setOrientation(Qt.Orientation.Horizontal)
        self.vd_slider.setTickPosition(QSlider.NoTicks)
        self.vd_slider.setObjectName("vd_slider")
        self.time_chk = QLabel(self.splitter_2)
        self.time_chk.setMaximumSize(QSize(120, 50))
        self.time_chk.setAlignment(Qt.AlignmentFlag.AlignRight | Qt.AlignmentFlag.AlignTrailing | Qt.AlignmentFlag.AlignVCenter)
        self.time_chk.setObjectName("time_chk")
        self.null_12 = QLabel(self.splitter_14)
        self.null_12.setMinimumSize(QSize(9, 100))
        self.null_12.setMaximumSize(QSize(9, 16777215))
        self.null_12.setFrameShape(QFrame.NoFrame)
        self.null_12.setText("")
        self.null_12.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.null_12.setObjectName("null_12")
        self.splitter_13 = QSplitter(self.splitter_14)
        self.splitter_13.setOrientation(Qt.Orientation.Vertical)
        self.splitter_13.setObjectName("splitter_13")
        self.Video_groupBox = QGroupBox(self.splitter_13)
        self.Video_groupBox.setMinimumSize(QSize(309, 90))
        self.Video_groupBox.setMaximumSize(QSize(309, 90))
        font = QFont()
        font.setFamily("Consolas")
        font.setPointSize(14)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(9)
        self.Video_groupBox.setFont(font)
        self.Video_groupBox.setStyleSheet("font: 75 14pt \"Consolas\";\n"
                                          "color: rgb(0, 0, 127);")
        self.Video_groupBox.setObjectName("Video_groupBox")
        self.gridLayout_2 = QGridLayout(self.Video_groupBox)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.vd_load_btn = QPushButton(self.Video_groupBox)
        self.vd_load_btn.setMinimumSize(QSize(100, 38))
        self.vd_load_btn.setMaximumSize(QSize(150, 38))
        font = QFont()
        font.setFamily("Consolas")
        font.setPointSize(12)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(9)
        self.vd_load_btn.setFont(font)
        self.vd_load_btn.setStyleSheet("font: 75 12pt \"Consolas\";\n"
                                       "color: rgb(0, 0, 0);")
        self.vd_load_btn.setObjectName("vd_load_btn")
        self.gridLayout_2.addWidget(self.vd_load_btn, 0, 0, 1, 1)
        self.ld_view_btn = QPushButton(self.Video_groupBox)
        self.ld_view_btn.setMinimumSize(QSize(100, 38))
        self.ld_view_btn.setMaximumSize(QSize(150, 38))
        font = QFont()
        font.setFamily("Consolas")
        font.setPointSize(12)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(9)
        self.ld_view_btn.setFont(font)
        self.ld_view_btn.setStyleSheet("font: 75 12pt \"Consolas\";\n"
                                       "color: rgb(0, 0, 0);")
        self.ld_view_btn.setObjectName("ld_view_btn")
        self.gridLayout_2.addWidget(self.ld_view_btn, 0, 1, 1, 1)
        self.Landmark_groupBox = QGroupBox(self.splitter_13)
        self.Landmark_groupBox.setMinimumSize(QSize(309, 77))
        self.Landmark_groupBox.setMaximumSize(QSize(309, 77))
        font = QFont()
        font.setFamily("Consolas")
        font.setPointSize(14)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(9)
        self.Landmark_groupBox.setFont(font)
        self.Landmark_groupBox.setStyleSheet("font: 75 14pt \"Consolas\";\n"
                                             "color: rgb(0, 0, 127);")
        self.Landmark_groupBox.setObjectName("Landmark_groupBox")
        self.gridLayout = QGridLayout(self.Landmark_groupBox)
        self.gridLayout.setObjectName("gridLayout")
        self.splitter_4 = QSplitter(self.Landmark_groupBox)
        self.splitter_4.setMinimumSize(QSize(141, 0))
        self.splitter_4.setMaximumSize(QSize(16777215, 35))
        self.splitter_4.setOrientation(Qt.Orientation.Horizontal)
        self.splitter_4.setObjectName("splitter_4")
        self.label = QLabel(self.splitter_4)
        font = QFont()
        font.setFamily("Consolas")
        font.setPointSize(12)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(9)
        self.label.setFont(font)
        self.label.setStyleSheet("font: 75 12pt \"Consolas\";\n"
                                 "color: rgb(0, 0, 0);")
        self.label.setObjectName("label")
        self.spinBox = QSpinBox(self.splitter_4)
        self.spinBox.setMinimumSize(QSize(80, 35))
        self.spinBox.setMaximumSize(QSize(80, 35))
        font = QFont()
        font.setFamily("Consolas")
        font.setPointSize(12)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(9)
        self.spinBox.setFont(font)
        self.spinBox.setObjectName("spinBox")
        self.gridLayout.addWidget(self.splitter_4, 0, 0, 1, 1)
        self.splitter_5 = QSplitter(self.Landmark_groupBox)
        self.splitter_5.setMinimumSize(QSize(141, 0))
        self.splitter_5.setMaximumSize(QSize(16777215, 35))
        self.splitter_5.setOrientation(Qt.Orientation.Horizontal)
        self.splitter_5.setObjectName("splitter_5")
        self.label_3 = QLabel(self.splitter_5)
        font = QFont()
        font.setFamily("Consolas")
        font.setPointSize(12)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(9)
        self.label_3.setFont(font)
        self.label_3.setStyleSheet("font: 75 12pt \"Consolas\";\n"
                                   "color: rgb(0, 0, 0);")
        self.label_3.setObjectName("label_3")
        self.cb_color = QComboBox(self.splitter_5)
        self.cb_color.setMinimumSize(QSize(80, 35))
        self.cb_color.setMaximumSize(QSize(80, 35))
        font = QFont()
        font.setFamily("Consolas")
        font.setPointSize(12)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(9)
        self.cb_color.setFont(font)
        self.cb_color.setObjectName("cb_color")
        self.gridLayout.addWidget(self.splitter_5, 0, 1, 1, 1)
        self.Grade_Label_groupBox = QGroupBox(self.splitter_13)
        self.Grade_Label_groupBox.setMinimumSize(QSize(309, 127))
        self.Grade_Label_groupBox.setMaximumSize(QSize(309, 127))
        font = QFont()
        font.setFamily("Consolas")
        font.setPointSize(14)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(9)
        self.Grade_Label_groupBox.setFont(font)
        self.Grade_Label_groupBox.setStyleSheet("font: 75 14pt \"Consolas\";\n"
                                                "color: rgb(0, 0, 127);")
        self.Grade_Label_groupBox.setObjectName("Grade_Label_groupBox")
        self.splitter_7 = QSplitter(self.Grade_Label_groupBox)
        self.splitter_7.setGeometry(QRect(158, 32, 141, 36))
        self.splitter_7.setMinimumSize(QSize(141, 0))
        self.splitter_7.setMaximumSize(QSize(16777215, 36))
        self.splitter_7.setOrientation(Qt.Orientation.Horizontal)
        self.splitter_7.setObjectName("splitter_7")
        self.FNGS = QLabel(self.splitter_7)
        self.FNGS.setStyleSheet("font: 75 12pt \"Consolas\";\n"
                                "color: rgb(0, 0, 0);")
        self.FNGS.setObjectName("FNGS")
        self.FNGS_lineEdit = QLineEdit(self.splitter_7)
        self.FNGS_lineEdit.setMinimumSize(QSize(80, 36))
        self.FNGS_lineEdit.setMaximumSize(QSize(80, 36))
        self.FNGS_lineEdit.setObjectName("FNGS_lineEdit")
        self.splitter_8 = QSplitter(self.Grade_Label_groupBox)
        self.splitter_8.setGeometry(QRect(10, 32, 141, 36))
        self.splitter_8.setMinimumSize(QSize(141, 0))
        self.splitter_8.setMaximumSize(QSize(16777215, 36))
        self.splitter_8.setOrientation(Qt.Orientation.Horizontal)
        self.splitter_8.setObjectName("splitter_8")
        self.HBG = QLabel(self.splitter_8)
        self.HBG.setStyleSheet("font: 75 12pt \"Consolas\";\n"
                               "color: rgb(0, 0, 0);")
        self.HBG.setObjectName("HBG")
        self.HBG_lineEdit = QLineEdit(self.splitter_8)
        self.HBG_lineEdit.setMinimumSize(QSize(80, 36))
        self.HBG_lineEdit.setMaximumSize(QSize(80, 36))
        self.HBG_lineEdit.setObjectName("HBG_lineEdit")
        self.Save_Label_btn = QPushButton(self.Grade_Label_groupBox)
        self.Save_Label_btn.setEnabled(False)
        self.Save_Label_btn.setGeometry(QRect(10, 80, 290, 38))
        self.Save_Label_btn.setMinimumSize(QSize(290, 38))
        self.Save_Label_btn.setMaximumSize(QSize(290, 38))
        font = QFont()
        font.setFamily("Consolas")
        font.setPointSize(12)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(9)
        self.Save_Label_btn.setFont(font)
        self.Save_Label_btn.setStyleSheet("font: 75 12pt \"Consolas\";\n"
                                          "color: rgb(0, 0, 0);")
        self.Save_Label_btn.setObjectName("Save_Label_btn")
        self.label_4 = QLabel(self.splitter_13)
        self.label_4.setMinimumSize(QSize(0, 2))
        self.label_4.setMaximumSize(QSize(16777215, 2))
        self.label_4.setText("")
        self.label_4.setObjectName("label_4")
        self.splitter_3 = QSplitter(self.splitter_13)
        self.splitter_3.setMaximumSize(QSize(310, 38))
        self.splitter_3.setOrientation(Qt.Orientation.Horizontal)
        self.splitter_3.setObjectName("splitter_3")
        self.Convert_HD_btn = QPushButton(self.splitter_3)
        self.Convert_HD_btn.setEnabled(False)
        self.Convert_HD_btn.setMinimumSize(QSize(310, 38))
        self.Convert_HD_btn.setMaximumSize(QSize(310, 38))
        font = QFont()
        font.setFamily("Consolas")
        font.setPointSize(12)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(9)
        self.Convert_HD_btn.setFont(font)
        self.Convert_HD_btn.setStyleSheet("font: 75 12pt \"Consolas\";")
        self.Convert_HD_btn.setObjectName("Convert_HD_btn")
        self.Convert_HD_btn.setStyleSheet("font: 75 12pt \"Consolas\";\n"
                                          "color: rgb(0, 0, 0);")
        self.label_7 = QLabel(self.splitter_13)
        self.label_7.setMinimumSize(QSize(0, 2))
        self.label_7.setMaximumSize(QSize(16777215, 2))
        self.label_7.setText("")
        self.label_7.setObjectName("label_7")
        self.label_5 = QLabel(self.splitter_13)
        self.label_5.setMinimumSize(QSize(0, 21))
        self.label_5.setMaximumSize(QSize(16777215, 21))
        self.label_5.setStyleSheet("font: 75 13pt \"Consolas\";")
        self.label_5.setObjectName("label_5")
        self.label_2 = QLabel(self.splitter_13)
        self.label_2.setMinimumSize(QSize(0, 1))
        self.label_2.setMaximumSize(QSize(16777215, 1))
        self.label_2.setText("")
        self.label_2.setObjectName("label_2")
        self.Convert_log_edit = QPlainTextEdit(self.splitter_13)
        self.Convert_log_edit.setMinimumSize(QSize(0, 100))
        font = QFont()
        font.setFamily("Consolas")
        font.setPointSize(9)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(9)
        self.Convert_log_edit.setFont(font)
        self.Convert_log_edit.setStyleSheet("border-radius: 0px;border: 1px solid black;\n"
                                            "font: 75 9pt \"Consolas\";")
        self.Convert_log_edit.setReadOnly(True)
        self.Convert_log_edit.setObjectName("Convert_log_edit")
        self.line = QFrame(self.splitter_13)
        self.line.setMinimumSize(QSize(0, 21))
        self.line.setMaximumSize(QSize(16777215, 21))
        self.line.setLineWidth(1)
        self.line.setFrameShape(QFrame.HLine)
        self.line.setFrameShadow(QFrame.Sunken)
        self.line.setObjectName("line")
        self.gridLayout_3.addWidget(self.splitter_14, 0, 0, 1, 1)
        self.splitter_16 = QSplitter(self.centralwidget)
        self.splitter_16.setOrientation(Qt.Orientation.Horizontal)
        self.splitter_16.setObjectName("splitter_16")
        self.HD_MSS_Print = QLabel(self.splitter_16)
        self.HD_MSS_Print.setMinimumSize(QSize(640, 480))
        self.HD_MSS_Print.setMaximumSize(QSize(16777215, 16777215))
        font = QFont()
        font.setFamily("Consolas")
        font.setPointSize(20)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(9)
        self.HD_MSS_Print.setFont(font)
        self.HD_MSS_Print.setStyleSheet("background-color: rgb(20, 20, 30);color: rgb(255, 255, 255);\n"
                                        "font: 75 20pt \"Consolas\";")
        self.HD_MSS_Print.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.HD_MSS_Print.setObjectName("HD_MSS_Print")
        self.null_13 = QLabel(self.splitter_16)
        self.null_13.setMinimumSize(QSize(9, 100))
        self.null_13.setMaximumSize(QSize(9, 16777215))
        self.null_13.setFrameShape(QFrame.NoFrame)
        self.null_13.setText("")
        self.null_13.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.null_13.setObjectName("null_13")
        self.splitter_15 = QSplitter(self.splitter_16)
        self.splitter_15.setOrientation(Qt.Orientation.Vertical)
        self.splitter_15.setObjectName("splitter_15")
        self.splitter_9 = QSplitter(self.splitter_15)
        self.splitter_9.setMinimumSize(QSize(310, 0))
        self.splitter_9.setMaximumSize(QSize(155, 38))
        self.splitter_9.setOrientation(Qt.Orientation.Horizontal)
        self.splitter_9.setObjectName("splitter_9")
        self.DL_Diagnosis_btn = QPushButton(self.splitter_9)
        self.DL_Diagnosis_btn.setEnabled(False)
        self.DL_Diagnosis_btn.setMinimumSize(QSize(310, 38))
        self.DL_Diagnosis_btn.setMaximumSize(QSize(155, 38))
        font = QFont()
        font.setFamily("Consolas")
        font.setPointSize(12)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(9)
        self.DL_Diagnosis_btn.setFont(font)
        self.DL_Diagnosis_btn.setStyleSheet("font: 75 12pt \"Consolas\";\n"
                                            "color: rgb(0, 0, 0);")
        self.DL_Diagnosis_btn.setObjectName("DL_Diagnosis_btn")
        self.label_12 = QLabel(self.splitter_15)
        self.label_12.setMinimumSize(QSize(0, 2))
        self.label_12.setMaximumSize(QSize(16777215, 2))
        self.label_12.setText("")
        self.label_12.setObjectName("label_12")
        self.groupBox = QGroupBox(self.splitter_15)
        self.groupBox.setMinimumSize(QSize(309, 100))
        self.groupBox.setMaximumSize(QSize(16777215, 100))
        self.groupBox.setStyleSheet("font: 75 14pt \"Consolas\";\n"
                                    "color: rgb(0, 100, 0);")
        self.groupBox.setObjectName("groupBox")
        self.splitter_11 = QSplitter(self.groupBox)
        self.splitter_11.setGeometry(QRect(20, 70, 182, 21))
        self.splitter_11.setMinimumSize(QSize(0, 21))
        self.splitter_11.setMaximumSize(QSize(16777215, 19))
        self.splitter_11.setStyleSheet("font: 75 13pt \"Consolas\";\n"
                                       "color: rgb(0, 0, 0)")
        self.splitter_11.setOrientation(Qt.Orientation.Horizontal)
        self.splitter_11.setObjectName("splitter_11")
        self.label_10 = QLabel(self.splitter_11)
        self.label_10.setMinimumSize(QSize(91, 16))
        self.label_10.setMaximumSize(QSize(91, 16))
        self.label_10.setStyleSheet("font: 75 12pt \"Consolas\";")
        self.label_10.setObjectName("label_10")
        self.Accuracy = QLabel(self.splitter_11)
        self.Accuracy.setMinimumSize(QSize(91, 16))
        self.Accuracy.setMaximumSize(QSize(91, 16))
        self.Accuracy.setStyleSheet("font: 75 12pt \"Consolas\";\n"
                                    "color: rgb(0, 85, 0);")
        self.Accuracy.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.Accuracy.setObjectName("Accuracy")
        self.label_14 = QLabel(self.splitter_11)
        self.label_14.setStyleSheet("font: 75 12pt \"Consolas\";")
        self.label_14.setText("")
        self.label_14.setObjectName("label_14")
        self.splitter_12 = QSplitter(self.groupBox)
        self.splitter_12.setGeometry(QRect(20, 40, 182, 21))
        self.splitter_12.setMinimumSize(QSize(0, 21))
        self.splitter_12.setMaximumSize(QSize(16777215, 19))
        self.splitter_12.setStyleSheet("font: 75 13pt \"Consolas\";\n"
                                       "color: rgb(0, 0, 0)")
        self.splitter_12.setOrientation(Qt.Orientation.Horizontal)
        self.splitter_12.setObjectName("splitter_12")
        self.label_9 = QLabel(self.splitter_12)
        self.label_9.setMinimumSize(QSize(91, 16))
        self.label_9.setMaximumSize(QSize(91, 16))
        self.label_9.setStyleSheet("font: 75 12pt \"Consolas\";")
        self.label_9.setObjectName("label_9")
        self.HBG_2 = QLabel(self.splitter_12)
        self.HBG_2.setMinimumSize(QSize(91, 16))
        self.HBG_2.setMaximumSize(QSize(91, 16))
        self.HBG_2.setStyleSheet("font: 75 12pt \"Consolas\";\n"
                                 "color: rgb(0, 85, 0);")
        self.HBG_2.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.HBG_2.setObjectName("HBG_2")
        self.label_13 = QLabel(self.splitter_12)
        self.label_13.setStyleSheet("font: 75 12pt \"Consolas\";")
        self.label_13.setText("")
        self.label_13.setObjectName("label_13")
        self.label_8 = QLabel(self.splitter_15)
        self.label_8.setMinimumSize(QSize(0, 2))
        self.label_8.setMaximumSize(QSize(16777215, 2))
        self.label_8.setText("")
        self.label_8.setObjectName("label_8")
        self.label_6 = QLabel(self.splitter_15)
        self.label_6.setMinimumSize(QSize(0, 21))
        self.label_6.setMaximumSize(QSize(16777215, 21))
        self.label_6.setStyleSheet("font: 75 13pt \"Consolas\";")
        self.label_6.setObjectName("label_6")
        self.label_15 = QLabel(self.splitter_15)
        self.label_15.setMinimumSize(QSize(0, 1))
        self.label_15.setMaximumSize(QSize(16777215, 1))
        self.label_15.setText("")
        self.label_15.setObjectName("label_15")
        self.Diagnosis_log_edit_ = QPlainTextEdit(self.splitter_15)
        self.Diagnosis_log_edit_.setMinimumSize(QSize(0, 200))
        font = QFont()
        font.setFamily("Consolas")
        font.setPointSize(9)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(9)
        self.Diagnosis_log_edit_.setFont(font)
        self.Diagnosis_log_edit_.setStyleSheet("border-radius: 0px;border: 1px solid black;\n"
                                               "font: 75 9pt \"Consolas\";")
        self.Diagnosis_log_edit_.setReadOnly(True)
        self.Diagnosis_log_edit_.setObjectName("Diagnosis_log_edit_")
        self.splitter_10 = QSplitter(self.splitter_15)
        self.splitter_10.setMaximumSize(QSize(16777215, 38))
        self.splitter_10.setOrientation(Qt.Orientation.Horizontal)
        self.splitter_10.setObjectName("splitter_10")
        self.label_11 = QLabel(self.splitter_10)
        self.label_11.setText("")
        self.label_11.setObjectName("label_11")
        self.Save_Log_btn = QPushButton(self.splitter_10)
        self.Save_Log_btn.setEnabled(False)
        self.Save_Log_btn.setMinimumSize(QSize(100, 38))
        self.Save_Log_btn.setMaximumSize(QSize(155, 38))
        font = QFont()
        font.setFamily("Consolas")
        font.setPointSize(12)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(9)
        self.Save_Log_btn.setFont(font)
        self.Save_Log_btn.setStyleSheet("font: 75 12pt \"Consolas\";\n"
                                        "color: rgb(0, 0, 0);")
        self.Save_Log_btn.setObjectName("Save_Log_btn")
        self.gridLayout_3.addWidget(self.splitter_16, 1, 0, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "DL Bell\'s Palsy Diagnosis Tool (Version.1)"))
        self.vd_print.setText(_translate("MainWindow", "Video Viewer"))
        self.fname_label.setText(_translate("MainWindow", "file name"))
        self.play_btn.setText(_translate("MainWindow", "▶"))
        self.stop_btn.setText(_translate("MainWindow", "■"))
        self.time_chk.setText(_translate("MainWindow", "00:00:00/00:00:00"))
        self.Video_groupBox.setTitle(_translate("MainWindow", "Video Upload"))
        self.vd_load_btn.setText(_translate("MainWindow", "Load"))
        self.ld_view_btn.setText(_translate("MainWindow", "LM View"))
        self.Landmark_groupBox.setTitle(_translate("MainWindow", "Landmark "))
        self.label.setText(_translate("MainWindow", "Size:"))
        self.spinBox.setStyleSheet(_translate("MainWindow", "font: 75 12pt \"Consolas\";\n"
                                                            "color: rgb(0, 0, 0);"))
        self.label_3.setText(_translate("MainWindow", "Color:"))
        self.cb_color.setStyleSheet(_translate("MainWindow", "font: 75 12pt \"Consolas\";\n"
                                                             "color: rgb(0, 0, 0);"))
        self.Grade_Label_groupBox.setTitle(_translate("MainWindow", "Grade Label"))
        self.FNGS.setText(_translate("MainWindow", "FNGS:"))
        self.FNGS_lineEdit.setStyleSheet(_translate("MainWindow", "font: 75 12pt \"Consolas\";\n"
                                                                  "color: rgb(0, 0, 0);"))
        self.FNGS_lineEdit.setText(_translate("MainWindow", "0"))
        self.HBG.setText(_translate("MainWindow", "HBG:"))
        self.HBG_lineEdit.setStyleSheet(_translate("MainWindow", "font: 75 12pt \"Consolas\";\n"
                                                                 "color: rgb(0, 0, 0);"))
        self.HBG_lineEdit.setText(_translate("MainWindow", "0"))
        self.Save_Label_btn.setText(_translate("MainWindow", "Save Label"))
        self.Convert_HD_btn.setText(_translate("MainWindow", "Convert HD-MSS"))
        self.label_5.setText(_translate("MainWindow", "Convert Log"))
        self.HD_MSS_Print.setText(_translate("MainWindow", "HD-MSS Viewer"))
        self.DL_Diagnosis_btn.setText(_translate("MainWindow", "DL_Diagnosis"))
        self.groupBox.setTitle(_translate("MainWindow", "Diagnosis Result"))
        self.label_10.setText(_translate("MainWindow", "Accuracy :"))
        self.Accuracy.setText(_translate("MainWindow", "-"))
        self.label_9.setText(_translate("MainWindow", "HBG      :"))
        self.HBG_2.setText(_translate("MainWindow", "-"))
        self.label_6.setText(_translate("MainWindow", "DL_Diagnosis Log"))
        self.Save_Log_btn.setText(_translate("MainWindow", "Save Log"))


class MainWindow(QMainWindow, Ui_MainWindow):
    def __init__(self):
        super(MainWindow, self).__init__()
        self.setupUi(self)

        # MediaPipe 검출기 생성 매개변수
        max_num_faces = 1
        min_detection_confidence = 0.7
        min_tracking_confidence = 0.5
        model_complexity = 1

        # MediaPipe face mesh 검출기 생성
        mp_face_mesh = mp.solutions.face_mesh
        self.face_mesh = mp_face_mesh.FaceMesh(
            max_num_faces=max_num_faces,
            min_detection_confidence=min_detection_confidence,
            min_tracking_confidence=min_tracking_confidence,
            refine_landmarks=True,
        )

        # self.file_name_t = None
        # self.video_loaded = None
        self.vd_name = ''
        self.fname = []

        self.windows_user_name_HBG = os.path.expanduser('~') + '/Desktop/HBG_dataset'
        self.windows_user_name_FNGS = os.path.expanduser('~') + '/Desktop/FNGS_dataset'
        self.video_loaded = False
        self.play = False
        self.ld_view_toggle = False

        # 버튼 연결 구문 #
        self.vd_load_btn.clicked.connect(self.load_video)
        self.ld_view_btn.clicked.connect(self.ld_view)
        self.play_btn.clicked.connect(self.vdPlay)
        self.stop_btn.clicked.connect(self.stop)
        self.Save_Label_btn.clicked.connect(self.HBG_Labeling)
        self.Save_Label_btn.clicked.connect(self.FNGS_Labeling)
        self.Convert_HD_btn.clicked.connect(self.Convert_mss)
        self.DL_Diagnosis_btn.clicked.connect(self.DL_inference)
        self.Save_Log_btn.clicked.connect(self.Save_log)
        ################

        # 슬라이더
        self.vd_slider.sliderMoved.connect(self.set_position)
        self.vd_slider.setEnabled(False)

        # self.thread = VdAnalysis()
        # self.thread.finished_signal.connect(self.on_thread_finished)
        # self.analysis_s_btn.clicked.connect(self.analysis_start)

        # 비디오 파일의 총 프레임 수 및 FPS
        self.total_frames = 1
        self.fps = 0
        self.c_loc = 0

        # landmark 설정
        self.p_size = 1
        self.spinBox.setMinimum(1)
        self.spinBox.setValue(1)
        self.spinBox.valueChanged.connect(self.spin_handle)

        self.setcolor = (0, 0, 255)
        self.cb_color.addItems(['Red', 'Blue', 'Green'])
        self.cb_color.setCurrentText('Blue')
        self.cb_color.activated.connect(self.cb_handle)

        self.timeq = QTimer()
        self.timeq.timeout.connect(self.mediaUpdate)

        self.capture = None
        self.timer = QTimer(self)
        self.timer.timeout.connect(self.display_frame)
        self.video_loaded = False
        self.playing = False
        self.total_duration = 0  # 총 재생 시간
        self.current_duration = 0  # 현재 재생 시간
        self.frame_duration = 0  # FPS
        self.total_frames = 0  # 총프레임 수
        self.frame = None
        self.raw_HDMMS_img = None

        self.HBG = 0
        self.Acc = 0

        self.Diag_log = []

    def spin_handle(self, value):

        self.p_size = value

        if not self.video_loaded:
            return
        self.draw_pixmap(self.frame, self.vd_print)

    def cb_handle(self, value):

        selected_item = self.cb_color.currentText()

        color_blue = (0, 0, 255)
        color_red = (255, 0, 0)
        color_green = (0, 255, 0)

        if selected_item == 'Red':
            self.setcolor = color_red
        elif selected_item == 'Blue':
            self.setcolor = color_blue
        elif selected_item == 'Green':
            self.setcolor = color_green
        else:
            self.log_something("color err")

        if not self.video_loaded:
            return

        self.draw_pixmap(self.frame, self.vd_print)

    # 랜드마크 시각화
    def ld_view(self):
        if not self.video_loaded:
            return

        self.ld_view_toggle = not self.ld_view_toggle
        self.draw_pixmap(self.frame, self.vd_print)

    # 동영상 로드 -> 재생 부분 ################################
    def load_video(self):
        try:
            self.vd_name = QFileDialog.getOpenFileName(self, 'Load Video', '',
                                                       'Videos (*.avi *.mp4 *.mov *.mkv);;All Files (*)')

            if self.vd_name[0]:
                self.video = cv2.VideoCapture(self.vd_name[0])

                link_list = self.vd_name[0].split('/')
                # fname = link_list[len(link_list) - 1][:-4]
                self.fname = link_list[len(link_list) - 1]
                self.fname_label.setText('%s' % self.fname)
                self.iname = self.fname.split('.')[0]

                # 비디오 파일의 총 프레임 수 및 FPS를 가져옵니다.
                self.total_frames = int(self.video.get(cv2.CAP_PROP_FRAME_COUNT))
                self.fps = self.video.get(cv2.CAP_PROP_FPS)
                self.frame_duration = round(1000 / int(self.fps))

                # minutes, ms = divmod(self.total_frames * self.frame_duration, 60000)
                # hours, minutes = divmod(minutes, 60)
                # seconds = ms // 1000

                self.video_loaded = True

                # slider
                self.vd_slider.setRange(0, self.total_frames - 1)
                self.vd_slider.setValue(0)
                self.vd_slider.setEnabled(True)

                # 전체 재생 시간 계산
                total_seconds = int(self.total_frames / self.fps)
                # 초를 시분초 형태로 변환
                self.total_time = sec_to_time(total_seconds)
                self.c_loc = 0
                self.video.set(cv2.CAP_PROP_POS_FRAMES, 0)
                self.mediaUpdate()

                self.Convert_HD_btn.setEnabled(True)
                self.Save_Label_btn.setEnabled(False)
                self.DL_Diagnosis_btn.setEnabled(False)
        except Exception as e:
            QMessageBox.warning(self, "영상을 다시 업로드 해주세요", str(e))
            print(e)

    def vdPlay(self):
        try:
            if not self.video_loaded:
                return

            if self.video.isOpened():
                if self.play:
                    self.play = False
                    self.timeq.stop()
                    self.play_btn.setText('▶')
                else:
                    self.play = True
                    self.timeq.start(int(self.fps))
                    self.play_btn.setText('||')
        except:
            QMessageBox.warning(self, "경고", "영상 재생이 안됩니다!", QMessageBox.Ok)
            # self.log_something("영상 재생이 정상적으로 되지 않습니다!")
            traceback.format_exc()

    def stop(self):
        try:
            if not self.video_loaded:
                return

            if self.video.isOpened():
                self.play = False
                self.timeq.stop()
                self.c_loc = 0
                self.vd_slider.setValue(self.c_loc)
                self.video.set(cv2.CAP_PROP_POS_FRAMES, self.c_loc)
                self.mediaUpdate()
                self.play_btn.setText('▶')
        except:
            QMessageBox.warning(self, "경고", "영상 정지 오류!", QMessageBox.Ok)
            # self.log_something("영상 정지가 정상적으로 되지 않습니다!")
            traceback.format_exc()

    def set_position(self):
        self.c_loc = int(self.vd_slider.value())
        self.video.set(cv2.CAP_PROP_POS_FRAMES, self.c_loc)
        self.mediaUpdate()

    # 영상 업데이트 함수
    def mediaUpdate(self):
        try:
            if self.play:
                self.vd_slider.setValue(self.c_loc)
                self.c_loc += 1

            ret, self.frame = self.video.read(cv2.CAP_DSHOW)
            if not ret:
                self.play = False
                self.timeq.stop()
                self.frame = self.prnt_frame
                self.play_btn.setText('▶')
                return

            self.prnt_frame = self.frame.copy()
            self.draw_pixmap(self.prnt_frame, self.vd_print)

            current_time_txt = sec_to_time(self.c_loc / self.fps)
            self.time_chk.setText(f"{current_time_txt}/{self.total_time}")

        except Exception as e:
            QMessageBox.warning(self, "경고", "영상 로딩 오류!", QMessageBox.Ok)
            # self.log_something("영상 로딩 오류!")
            traceback.format_exc()
            raise

    def display_frame(self):
        if not self.playing:
            return

        ret, self.frame = self.capture.read()
        if ret:
            self.frame = cv2.cvtColor(self.frame, cv2.COLOR_BGR2RGB)
            height, width, channel = self.frame.shape
            bytes_per_line = 3 * width
            q_img = QImage(self.frame.data, width, height, bytes_per_line, QImage.Format_RGB888)
            pixmap = QPixmap.fromImage(q_img)
            self.vd_print.setPixmap(pixmap)

            self.current_duration = int(self.capture.get(cv2.CAP_PROP_POS_FRAMES) / self.capture.get(cv2.CAP_PROP_FPS))
            self.update_time_chk()  # 재생 시간 업데이트
        else:
            self.playing = False
            self.play_btn.setEnabled(True)
            self.stop_btn.setEnabled(False)
            self.timer.stop()

    def update_time_chk(self):
        total_duration_ms = self.total_frames * self.frame_duration
        minutes, ms = divmod(total_duration_ms, 60000)
        # hours, minutes = divmod(minutes, 60)
        # seconds = ms // 1000
        self.time_chk.setText(
            f"{self.format_time(self.current_duration)} / {self.format_time(total_duration_ms // 1000)}")

    def format_time(self, seconds):
        minutes, seconds = divmod(seconds, 60)
        hours, minutes = divmod(minutes, 60)
        return f"{int(hours):02d}:{int(minutes):02d}:{int(seconds):02d}"

    def draw_pixmap(self, image, label):
        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
        h, w, ch = image.shape

        # 랜드마크 계산
        if self.ld_view_toggle:
            results = self.face_mesh.process(image)

            if results.multi_face_landmarks is not None:
                for face_landmarks in results.multi_face_landmarks:
                    image = draw_landmarks(image, face_landmarks, self.setcolor, self.p_size)
        else:
            pass

        cimage = QImage(image.data, w, h, ch * w, QImage.Format_RGB888)
        scaled_pixmap = QPixmap.fromImage(cimage).scaled(label.size(), Qt.KeepAspectRatio)
        label.setPixmap(scaled_pixmap)
        label.setAlignment(Qt.AlignmentFlag.AlignCenter)

    # 동영상 로드 -> 재생 부분 ################################ END

    #### Convert 버튼
    def Convert_mss(self):
        try:
            self.HD_MSS_R = CONVERT_MSS(self.vd_name[0])  # 동영상 input ( ** 함수 입출력 구문 **)

            self.draw_pixmap(self.HD_MSS_R, self.HD_MSS_Print)

            self.raw_HDMMS_img = self.HD_MSS_R  # image for inference
            #
            # # Setpixmap을 위한 구문 #
            # # print(frame.shape)
            # height, width = frame.shape
            # # bytes_per_line = 3 * width
            # q_img = QImage(frame.data, width, height, QImage.Format.Format_Grayscale8)
            # pixmap = QPixmap.fromImage(q_img)
            # self.HD_MSS_Print.setPixmap(pixmap)
            #
            self.Convert_log_edit.appendPlainText(str(self.fname) + '\n conversion success.')
            self.DL_Diagnosis_btn.setEnabled(True)
            self.Save_Label_btn.setEnabled(True)

        except Exception as e:
            self.Convert_log_edit.appendPlainText(
                str(self.fname) + '\n conversion failed.\n  Please try HD-MSS conversion again.')
            print(e)

    def HBG_Labeling(self):
        try:
            UserPath_H = self.windows_user_name_HBG + '/' + self.HBG_lineEdit.text()
            UserPath_H_utf8 = UserPath_H.encode('utf-8').decode('utf-8')
            if not os.path.exists(self.windows_user_name_HBG):
                os.mkdir(self.windows_user_name_HBG)
            get_Iname = self.iname
            get_Iname_utf8 = get_Iname.encode('utf-8').decode('utf-8')
            if 1 <= int(self.HBG_lineEdit.text()) <= 6:
                img = self.HD_MSS_R
                if not os.path.exists(UserPath_H_utf8):
                    os.mkdir(UserPath_H_utf8)
                filename = os.path.join(UserPath_H_utf8, get_Iname_utf8)

                # cv2.imwrite(filename + ".jpg", img)

                x = np.array(img)
                img_2 = Image.fromarray(x)
                img_2.save(filename + ".jpg", 'JPEG')

                self.Convert_log_edit.appendPlainText(get_Iname + '\n Save_HBG_success')
            else:
                self.Convert_log_edit.appendPlainText('\n HBG value is incorrect.\n  Please check the HBG value.')

        except Exception as e:
            self.Convert_log_edit.appendPlainText(
                get_Iname + '\n Save HBG_Label failed.\n  Please try Save Label again.')
            print(e)

    def FNGS_Labeling(self):
        try:
            UserPath_F = self.windows_user_name_FNGS + '/' + self.FNGS_lineEdit.text()
            UserPath_F_utf8 = UserPath_F.encode('utf-8').decode('utf-8')
            if not os.path.exists(self.windows_user_name_FNGS):
                os.mkdir(self.windows_user_name_FNGS)
            get_Iname = self.iname
            get_Iname_utf8 = get_Iname.encode('utf-8').decode('utf-8')
            if 1 <= int(self.FNGS_lineEdit.text()) <= 6:
                img = self.HD_MSS_R

                if not os.path.exists(UserPath_F_utf8):
                    os.mkdir(UserPath_F_utf8)
                filename = os.path.join(UserPath_F_utf8, get_Iname_utf8)
                # cv2.imwrite(filename + ".jpg", img)
                x = np.array(img)
                img_2 = Image.fromarray(x)
                img_2.save(filename + ".jpg", 'JPEG')
                self.Convert_log_edit.appendPlainText(get_Iname + '\n Save_FNGS_success')
            else:
                self.Convert_log_edit.appendPlainText('\n FNGS value is incorrect.\n  Please check the FNGS value.')

        except Exception as e:
            self.Convert_log_edit.appendPlainText(
                get_Iname + '\n Save FNGS_Label failed.\n  Please try Save Label again.')
            print(e)

    # 인공지능 추론 버튼
    def DL_inference(self):
        try:
            if self.raw_HDMMS_img is not None:
                self.HBG, self.Acc = prediction(self.raw_HDMMS_img)
                self.HBG_2.setText(f"{self.HBG}")
                self.Accuracy.setText(f"{self.Acc}%")

                # 로그 저장 및 불러오기
                diag_text = f"{self.iname} : {self.HBG} / {self.Acc}%"
                self.Diagnosis_log_edit_.appendPlainText(diag_text)
                self.Save_Log_btn.setEnabled(True)  # 저장버튼 활성화

        except Exception as e:
            print(f"DL_inference error : {e}")

    # 로그 저장 버튼
    def Save_log(self):
        text = self.Diagnosis_log_edit_.toPlainText()
        if text:
            file_name, _ = QFileDialog.getSaveFileName(self, 'Save File', '', 'Text Files (*.txt)')
            if file_name:
                with open(file_name, 'w', encoding='utf-8') as file:
                    file.write(text)


if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = MainWindow()
    window.show()
    sys.exit(app.exec_())
